#!/gpfs01/software/imaging/miniconda3/envs/xnat/bin/python
"""
Script to upload data from a BIDS compliant output to a known project/subject/session
"""
import sys
import os 

import xnat
import json

XML_HEADER = """
<MRIQCData xmlns="http://github.com/spmic-uon/xnat-hpc" xmlns:xnat="http://nrg.wustl.edu/xnat" xsi:schemaLocation="http://github.com/spmic-uon/xnat-hpc schema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <xnat:label>%s</xnat:label>
  <mriqcVersion>%s</mriqcVersion>"""

XML_FOOTER = """
</MRIQCData>"""

print("Upload MRIQC: %s" % sys.argv)
host_url = sys.argv[1]
proj=sys.argv[2]
subj=sys.argv[3]
exp=sys.argv[4]
bidsdir=sys.argv[5]
assessor_type=sys.argv[6]
assessor_name=sys.argv[7]
user_alias = sys.argv[8]
jsessionid = sys.argv[9]

def bids_match(bids_name, xnat_name):
    ret = bids_name.endswith(xnat_name.replace(" ", "").replace("_", "").replace("-", ""))
    print("Match? %s : %s -> %s" % (bids_name, xnat_name, ret))
    return ret

def create_scanxml(fname, md):
    xml = "  <scan>\n"
    xml += "    <scan_id>%s</scan_id>\n" % fname[:fname.index(".")]
    for key in md:
        if key not in ("bids_meta", "provenance"):
            xml +="    <%s>%s</%s>\n" % (key, md[key], key)
    xml += "  </scan>\n"
    return xml

def upload(sesdir):
    xml = XML_HEADER % (assessor_name, "unknown")
    for subdir in os.listdir(sesdir):
        print("Uploading files in %s" % subdir)
        filedir = os.path.join(sesdir, subdir)
        for fname in os.listdir(filedir):
            print("Uploading: %s" % fname)
            fpath = os.path.join(filedir, fname)
            with open(fpath) as f:
                md = json.load(f)
                xml += create_scanxml(fname, md)
    xml += XML_FOOTER
    with open("mriqc.xml", "w") as f:
        f.write(xml)
    print(xml)
    os.system('curl -u %s:%s -X POST "%s/data/projects/%s/subjects/%s/experiments/%s/assessors" -F "file=@mriqc.xml"' % (user_alias, jsessionid, host_url, proj, subj, exp))
#            os.system("xnatc --user=%s --password=%s --xnat=%s --project=%s --subject=%s --experiment=%s --upload=%s --upload-name=%s --assessor-type=%s --assessor=%s --upload-type=%s" % (user_alias, jsessionid, host_url, proj, subj, exp, fpath, fname, assessor_type, assessor_name, subdir))
# FIXME no project toplevel dir at present
#for bidsproj in os.listdir(bidsdir):
#    if bids_match(proj, bidsproj):
#        projdir = os.path.join(bidsdir, bidsproj)
projdir = bidsdir
for bidssubj in os.listdir(projdir):
# FIXME issue with subject name vs internal XNAT subject ID
#    if bids_match(bidssubj, subj):
    print("Checking %s" % bidssubj)
    subjdir = os.path.join(projdir, bidssubj)
    if os.path.isdir(subjdir) and bidssubj != "logs":
        print("Found subject dir: %s" % subjdir)
        for bidsses in os.listdir(subjdir):
            if bids_match(bidsses, exp):
                sesdir = os.path.join(subjdir, bidsses)
                print("Found session dir: %s" % sesdir)
                print("Uploading contents of %s" % sesdir)
                upload(sesdir)

