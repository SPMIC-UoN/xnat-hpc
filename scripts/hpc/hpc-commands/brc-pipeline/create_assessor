#!/gpfs01/software/imaging/miniconda3/envs/xnat/bin/python
"""
Script to create assessor XML from the output of hte BRC pipeline
"""
import sys
import os
import shutil
import datetime

__version__ = "0.0.1"

XML_HEADER = """<?xml version="1.0" encoding="UTF-8"?>
<PipelineData xmlns="http://github.com/spmic-uon/xnat-hpc" xmlns:xnat="http://nrg.wustl.edu/xnat" xsi:schemaLocation="http://github.com/spmic-uon/xnat-hpc schema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <xnat:label>%s</xnat:label>
  <pipelineVersion>%s</pipelineVersion>
  <pipelineName>%s</pipelineName>
"""

XML_FOOTER = """</PipelineData>"""

def get_label(cmd):
    now = datetime.datetime.now()
    timestamp = now.strftime("%Y%m%d_%H%M%S")
    return f"{cmd}_{timestamp}"

def create_assessor_xml():
    json_files = []
    label = get_label("BRC_PIPELINE")
    xml = XML_HEADER % (label, __version__, "BRC Pipeline")
    xml += "  <xnat:date>%s</xnat:date>\n" % datetime.datetime.today().strftime('%Y-%m-%d')
    xml += XML_FOOTER

    with open(os.path.join(assessordir, "brc.xml"), "w") as f:
        f.write(xml)

def copy_file(srcdir, path, destdir):
    srcfile = os.path.join(srcdir, path)
    if os.path.exists(srcfile):
        shutil.copy(srcfile, destdir)

def create_resource_files(brcdir):
    subjdirs = os.listdir(brcdir)
    if len(subjdirs) == 0:
        sys.stderr.write("WARNING: No subject directories found, no data will be uploaded")
        return
    elif len(subjdirs) > 1:
        sys.stderr.write("WARNING: Multiple subject directories found: %s - using first" % subjdirs)
    subjdir = os.path.join(brcdir, subjdirs[0])
    nifti_dir = os.path.join(assessordir, "brc", "NIFTI")
    os.makedirs(nifti_dir, exist_ok=True)

    copy_file(subjdir, "raw/anatMRI/T2/T2_orig_defaced.nii.gz", nifti_dir)
    copy_file(subjdir, "raw/anatMRI/T1/T1_orig_defaced.nii.gz", nifti_dir)

print("BRC pipeline - Create assessor: %s" % sys.argv)
workdir = sys.argv[1]
brcdir = os.path.join(workdir, "brc_out")
assessordir = os.path.join(workdir, "xnat-upload")
os.makedirs(assessordir, exist_ok=True)

create_assessor_xml()
create_resource_files(brcdir)
