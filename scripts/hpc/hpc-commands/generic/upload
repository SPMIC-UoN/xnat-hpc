#!/gpfs01/software/imaging/miniconda3/envs/xnat/bin/python
"""
Script to upload data from an HPC process

The process is responsible for creating data in a subfolder xnat-upload of the
working directory. This should contain a single XML file named according to 
the type of assessor being created. Subfolders are used to store resource
data objects (e.g. images, log files).

If no assessor is created a generic assessor type will be created in order
to attach the process logs to. The likely cause is that the process failed so
the logs may be useful to the user.s
"""
import glob
import sys
import os
import tempfile
import datetime

__version__ = "0.0.1"

GENERIC_ASSESSOR_XML = """<?xml version="1.0" encoding="UTF-8"?>
<PipelineData xmlns="http://github.com/spmic-uon/xnat-hpc" xmlns:xnat="http://nrg.wustl.edu/xnat" xsi:schemaLocation="http://github.com/spmic-uon/xnat-hpc schema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <xnat:label>%s</xnat:label>
  <pipelineName>%s</pipelineName>
</PipelineData>"""

def get_label(cmd):
    now = datetime.datetime.now()
    timestamp = now.strftime("%Y%m%d_%H%M%S")
    return f"{cmd}_{timestamp}"

def upload_logs(assessor):
    upload_resource(os.path.join(workdir, "out.log"), assessor, "LOGS")
    upload_resource(os.path.join(workdir, "err.log"), assessor, "LOGS")

def upload_generic_assessor(cmd):
    label = get_label(cmd)
    xml = GENERIC_ASSESSOR_XML % (label, cmd)
    print("Generic assessor XML:\n%s" % xml)
    fname = os.path.join(workdir, "temp.xml")
    with open(fname, "w") as f:
        f.write(xml)
    upload_assessor(fname)

def upload_assessor(fname):
    # Create an assessor on XNAT from an XML document
    with open(fname, "r") as f:
        print("Process-generated assessor XML\n%s" % f.read())

    cmd = "xnatc --user=%s --password=%s --xnat=%s --project=%s --subject=%s --experiment=%s --create-assessor=%s" % (user, passwd, host, proj, subj, exp, fname)
    print(cmd)
    os.system(cmd)

    # Need to get the label of the assessor so we can upload files against it
    import xml.etree.ElementTree as ET
    root = ET.parse(fname).getroot()
    for label_type in root.findall('{http://nrg.wustl.edu/xnat}label'):
        label = label_type.text
    print("Process-generated assessor label is %s" % label)

    assessor_name = os.path.basename(fname).rstrip(".xml")
    resource_dir = os.path.join(uploaddir, assessor_name)
    if os.path.isdir(resource_dir):
        for dirname in os.listdir(resource_dir):
            dpath = os.path.join(resource_dir, dirname)
            if os.path.isdir(dpath):
                for fname in os.listdir(dpath):
                    fpath = os.path.join(dpath, fname)
                    if os.path.isfile(fpath):
                        upload_resource(fpath, label, dirname.upper())

    upload_logs(label)

def upload_resource(fname, assessor, resource_type):
    # Upload a file as a resource on an assessor
    if not os.path.isfile(fname):
        print("WARNING: Resource file %s not found - will not upload" % fname)
        return
    cmd = "xnatc --user=%s --password=%s --xnat=%s --project=%s --subject=%s --experiment=%s --assessor=%s --upload=%s --upload-resource=%s" % (user, passwd, host, proj, subj, exp, assessor, fname, resource_type)
    print(cmd)
    os.system(cmd)

print("XNAT_HPC: UPLOADER v%s" % __version__)
if len(sys.argv) != 9:
    raise ValueError("Wrong number of arguments: %i (%s)" % (len(sys.argv), sys.argv))
host, proj, subj, exp, user, passwd, workdir, cmd = sys.argv[1:]

uploaddir = os.path.join(workdir, "xnat-upload")
if not os.path.exists(uploaddir):
    # FIXME upload logs to where?
    sys.stderr.write("WARNING: Upload directory %s not found - will create generic assessor to store logs\n" % uploaddir)
    upload_generic_assessor(cmd)
else:
    assessor_xmls = list(glob.glob(os.path.join(uploaddir, "*.xml")))
    if len(assessor_xmls) > 1:
        sys.stderr.write("WARNING: More than one assessor XML document found: %s - only first will be used" % assessor_xmls)
        upload_assessor(assessor_xmls[0])
    elif len(assessor_xmls) == 0:
        sys.stderr.write("WARNING: No assessor XML found - will create generic assessor to store logs")
        upload_generic_assessor(cmd)
    else:
        upload_assessor(assessor_xmls[0])
